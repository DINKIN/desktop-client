
//------------------------------------------------------
import bluebird = require('bluebird-global')


import { create23meReadStream } from './FormatHandlers/Plain23me/create23meStream'

import { F } from './Services/FileLoader'
import { dialog } from 'electron'
import { statSync, readFile } from 'fs'
import { extractFileHead as getFileHead } from './FormatHandlers/Plain23me/prepareForStream'

import co from 'co-bluebird'
import axios from 'axios'

/* eslint-disable prefer-promise-reject-errors */

const readFileAsync = bluebird['promisify'](readFile)

export async function showOpenDialog() {
  return new Promise( resolve => {
    dialog.showOpenDialog({ properties: ['openFile'] }, F=>resolve(F?F[0]:null)
      )
    }
  )
}

/**
 *  Open "select a file" dialog, and append the selected file as a
 *    path property to the task object.
 */
export async function selectFile(task) {
  if (task.path) {
    return task
  }
  return showOpenDialog()
    .then(path => ({ ...task, path }))
}


/**
 *  Extract filename and extension from the full path.
 */
export async function processFilePath (task) {
  if (task.path === null)
    return task

  let name = task.path.split('/').pop()
  let fext = name.split('.').pop()

  return { ...task, name, fext }
}


/**
 *  Get the full size of the file and add it to task's context.
 */
export async function getSize (task) {
  if (task.path === null)
    return task

  let { size } = statSync(task.path)
  return { ...task, size }
}


/**
*  Extract the first 2048 bytes of the file and strip out non-comments
*/
export async function extractFileHead (task) {
  if (task.path === null)
    return task

  let { text, header } = getFileHead(task.path)


  return { ...task, text, header }
}

/**
 *  Track progress of the task and send updates to frontend
 */
export function updateTask (event) {
  return async function (object) {
    event.sender.send('task-updated', object)
    return object
  }
}

/**
 *  Send results to the frontend.
 */
export function completeTask (event) {
  return async function (object) {
    event.sender.send('task-finished', object)
    return object
  }
}

/**
 *  Returns the name of data provider
 *
 *  Works for: 23andMe, AncestryDNA,
 */
export async function getDataProvider (task) {
  //
  const RE_GETPROVIDER = /[#]+[ ]*This[a-z ]+generated by ([a-zA-Z0-9 ]+) (?:at|on):(.+)/
  const RE_BUILD = /(build [0-9]+(?:[.][0-9]+)?)|Human genome reference used: (.+)/

  if (task.path === null)
    return task

  let { text } = task
  let T1: any = RE_GETPROVIDER.exec(text)
  let T2: any = RE_BUILD.exec(text)

  T1 = T1 !== null ? { provider: T1[1], time: T1[2] } : {}
  T2 = T2 !== null ? { build: T2[1] || T2[2] } : {}

  return { ...task, ...T1, ...T2 }
}



/**
 *  Create async function that taskes a task and
 *    then creates a record in db for task.file.
 *
 *  @returns task object with added "result" property
 *
 *  @method linkGeneticFile
 */
export function linkGeneticFile (db) {
  return async function (task) {
    if (task.path === null)
      return task

    let { path, provider, build, size, time, person } = task.file

    let entry = { path, provider, build, size, time, person,
      active: true,
      category: 'data',
      type: 'genetic'
    }

    return db.insert(entry).then(
      result => ({...task, result })
    )
  }
}


/**
 *  Create async function that searches db
 *    for a record with given id and adds it
 *    to "task" as a "databaseEntry" property
 *
 *  @method getById
 */
export function getById (db) {
  return async function (task) {

    let _id = task.task[1]

    return db.findOne({_id}).then(
      databaseEntry => ({...task, _id,  databaseEntry})
    )
  }
}



export async function loadFileToMemory(task) {
  let { _id, databaseEntry: { path } } = task
  F.loadFile({ ...task, _id, path})
  return task
}


export async function getFromRam(task) {
  let _id    = task.task[1]
  let offset = task.task[2]
  let search = task.task[3]

  let temp = search ? F.search(_id, search, offset)
                    : F.read(_id, offset)

  return {...task, _id, search, ...temp }
}






export async function readRSIdsFromFile (task) {
  let rsids = task.rsids
  let path = task.databaseEntry.path

  let genetic = {}

  let s = create23meReadStream(path).on('data',
    item => {
      if (!rsids.includes(item[0])) return
      genetic[item[0]] = item[3]
    })

  return new Promise(
    (resolve, reject) => {
      s.on( 'end', () => resolve({...task, genetic}) )
      s.on( 'error',  (error) => reject(error) )
    }
  )
}




export async function processReportRequest (object) {
  return axios.

  post(object.url, {
      genetic: object.genetic,
      request: {}
    }).

  then( result => ({
      ...object,
      ajax: result.data,
      person: object.databaseEntry.person
    }
  ))
}
